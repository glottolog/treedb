name: Build
on:
  - push
  - pull_request
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-3.11-full
            python-version: "3.11"
            args: "--run-writes"
            extra: ",pandas"
            os: ubuntu-latest
          - name: linux-3.11-full-master
            python-version: "3.11"
            args: "--glottolog-tag=master --run-writes"
            extra: ",pandas"
            os: ubuntu-latest
          - name: windows-3.11-full
            python-version: "3.11"
            args: "--run-writes"
            extra: ",pandas"
            os: windows-latest
          - name: linux-3.10-quick-lint
            python-version: "3.10"
            args: "--skip-slow --exclude-raw"
            extra: ",pandas"
            os: ubuntu-latest
          - name: linux-3.9
            python-version: "3.9"
            args: "--skip-slow --exclude-raw"
            extra: ",pandas"
            os: ubuntu-latest
          - name: linux-3.8-quick
            python-version: "3.8"
            args: "--skip-slow --exclude-raw"
            extra: ",pandas"
            os: ubuntu-latest
          - name: linux-3.7-quick
            python-version: "3.7"
            extra: ",pandas"
            args: "--skip-slow --exclude-raw"
            os: ubuntu-latest
    steps:
      - name: Check/configure long paths (if windows)
        if: ${{ startsWith(matrix.os, 'windows-') }}
        run: |
          echo "::group::Check HKLM:System\CurrentControlSet\Control\FileSystem.LongPathsEnabled"
          (Get-ItemProperty HKLM:System\CurrentControlSet\Control\FileSystem).LongPathsEnabled
          echo "::endgroup::"
          echo "::group::Run git config --system core.longpaths true"
          git config --system core.longpaths true
          echo "::endgroup::"
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Pip install dependencies
        run: |
          echo "::group::Run python -m pip install --upgrade pip setuptools wheel"
          python -m pip install --upgrade pip setuptools wheel
          echo "::endgroup::"
          echo "::group::Run pip install .[test,pretty${{ matrix.extra }}] flake8"
          pip install .[test,pretty${{ matrix.extra }}] flake8
          echo "::endgroup::"
      - name: Run tests with ${{ matrix.args }}
        run: python run-tests.py ${{ matrix.args }}
      - name: Upload test coverage
        uses: codecov/codecov-action@v3
      - name: Check Glottolog version
        run: echo "::notice::$(python -c 'import treedb; print(treedb.glottolog_version())')"
      - name: Run try-treedb.py (if -full)
        if: ${{ contains(matrix.os, '-full') }}
        run: |
          echo "::group::Run try-treedb.py"; FAILED=0;
          python try-treedb.py || FAILED=$?
          echo "::endgroup::"
          [ $FAILED -eq 0 ] || echo "::warning::try-treedb.py failed with exit code $FAILED"
        shell: bash
      - name: Run lint-code.py (if -lint)
        if: ${{ contains(matrix.name, '-lint') }}
        run: |
          echo "::group::Run lint-code.py --version"
          echo "$(python lint-code.py --version)"
          echo "::endgroup::"
          echo "::group::Run lint-code.py"; FAILED=0; python lint-code.py || FAILED=$?; echo "::endgroup::"
          [ $FAILED -eq 0 ] || echo "::warning::lint-code.py failed with exit code $FAILED"
        shell: bash
      - name: Upload ${{ matrix.name }} artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.name }}
          path: |
            treedb.log
            treedb*.sqlite3
            treedb*.jsonl
            treedb*.csv
